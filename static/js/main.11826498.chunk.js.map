{"version":3,"sources":["definitions/all-definitions.ts","util/helpers.ts","util/save-json.tsx","forms/combo-box.tsx","forms/input-element.tsx","forms/matrix.tsx","forms/graph-form.tsx","registerServiceWorker.ts","index.tsx"],"names":["graph","name","plural","attributes","raw_types","raw","dense","edges","structure","element","sparse","graphs","Graph","Vertex Weighted Graph","inherits","parameters","vertex_weight_type","vertices","Edge Weighted Graph","edge_weight_type","Vertex and Edge Weighted Graph","resolveInheritence","defName","inheritanceObjects","resolveInheritenceNames","definitions","inherit","def","hasOwnProperty","_i","_a","length","inh","push","flattenDeep","arr1","reduce","acc","val","Array","isArray","concat","filter","value","index","arr","indexOf","map","es","all","save_json_SaveJson","_super","SaveJson","props","_this","call","this","handleClick","console","log","setState","generate","state","tslib_es6","prototype","componentWillUpdate","render","react","onClick","JSON","stringify","jsonOutput","readOnly","combo_box_ComboBox","ComboBox","handleChange","e","onChange","types","choices","typeName","key","input_element_InputElement","InputElement","event","row","col","target","valid","type","pattern","className","matrix_Matrix","Matrix","newValue","copyData","data","slice","jsonOutputSetter","generateDataState","i","j","defaultValue","renderInputTable","table","children","dataPoint","elementType","graph_form_GraphForm","GraphForm","handleChangeDataType","dataTypeIndex","definition","Object","keys","data_type","handleChangeRawType","raw_type","json","json_output","input_elements","createStructure","rawTypeName","attrInfo","structureType","elementInfo","normalizedStructureType","trim","toLowerCase","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","react_dom","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.11826498.chunk.js","sourcesContent":["// TODO replace with a service to retrieve all objects\r\n\r\nexport const graph = {\r\n    name: \"Graph\",\r\n    plural: \"Graphs\",\r\n    attributes: [\"edges\"],\r\n    raw_types: [\"dense\", \"sparse\"],\r\n    raw: {\r\n        dense: {\r\n            edges: {\r\n                structure: \"Matrix\",\r\n                element: [\"Boolean\", \"0\"]\r\n            }\r\n        },\r\n        sparse: {\r\n            edges: {\r\n                structure: \"List\",\r\n                element: {\r\n                    structure: [\"Tuple\", 2],\r\n                    element: [\"Integer\", \"Integer\"]\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const graphVertexWeighted = {\r\n    inherits: [\"Graph\"],\r\n    name: \"Vertex Weighted Graph\",\r\n    plural: \"Vertex Weighted Graphs\",\r\n    attributes: [\"vertices\"],\r\n    parameters: {\r\n        vertex_weight_type: [\"Number\", \"Integer\"]\r\n    },\r\n    raw: {\r\n        dense: {\r\n            vertices: {\r\n                structure: \"List\",\r\n                element: [\"{{vertex_weight_type}}\", \"Integer\"]\r\n            }\r\n        },\r\n        sparse: {\r\n            vertices: {\r\n                structure: \"List\",\r\n                element: [\"{{vertex_weight_type}}\", \"Integer\"]\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const graphEdgeWeighted = {\r\n    inherits: [\"Graph\"],\r\n    name: \"Edge Weighted Graph\",\r\n    parameters: {\r\n        edge_weight_type: [\"Number\", \"Integer\"]\r\n    },\r\n    raw: {\r\n        dense: {\r\n            edges: {\r\n                element: [\"{{edge_weight_type}}\", \"Integer\"]\r\n            }\r\n        },\r\n        sparse: {\r\n            edges: {\r\n                element: {\r\n                    structure: [\"Tuple\", 3],\r\n                    element: [\r\n                        [\"Integer\", \"Integer\", \"{{edge_weight_type}}\"],\r\n                        [1, 1, \"Integer\"]\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const graphVertexWeightedEdgeWeighted = {\r\n    inherits: [\"Vertex Weighted Graph\", \"Edge Weighted Graph\"],\r\n    name: \"Vertex and Edge Weighted Graph\",\r\n    plural: \"Vertex and Edge Weighted Graphs\"\r\n};\r\n\r\nexport const graphs = {\r\n    \"Graph\": graph,\r\n    \"Vertex Weighted Graph\": graphVertexWeighted,\r\n    \"Edge Weighted Graph\": graphEdgeWeighted,\r\n    \"Vertex and Edge Weighted Graph\": graphVertexWeightedEdgeWeighted\r\n};\r\n","import merge from \"deepmerge\";\r\nimport {graphs} from \"../definitions/all-definitions\";\r\n\r\nexport function isArray(a: any) {\r\n    return (!!a) && (a.constructor === Array);\r\n}\r\n\r\nexport function isObject(a: any) {\r\n    return (!!a) && (a.constructor === Object);\r\n}\r\n\r\nexport function resolveInheritence(defName: string) {\r\n    const inheritanceNames = resolveInheritenceNames(graphs, defName);\r\n    const inheritanceObjects = inheritanceNames.map(name => graphs[name]);\r\n    const merged = merge.all(inheritanceObjects);\r\n    return merged;\r\n}\r\n\r\nfunction resolveInheritenceNames(definitions, name) {\r\n    const inherit: string[] = [];\r\n    const def = definitions[name];\r\n    if (def.hasOwnProperty('inherits')) {\r\n        for (const inh of def.inherits) {\r\n            inherit.push(inh);\r\n            inherit.push(resolveInheritenceNames(definitions, inh));\r\n        }\r\n    }\r\n\r\n    return flattenDeep(inherit).filter((value, index, arr) => arr.indexOf(value) === index);\r\n}\r\n\r\n// From mozilla JS docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#reduce_and_concat\r\nfunction flattenDeep(arr1) {\r\n    return arr1.reduce((acc, val) =>\r\n        Array.isArray(val) ?\r\n            acc.concat(flattenDeep(val)) :\r\n            acc.concat(val), []);\r\n}","import * as React from \"react\";\r\nimport {log} from \"util\";\r\n\r\n\r\nexport class SaveJson extends React.Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            generate: false\r\n        }\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        if (this.state.generate) {\r\n            this.setState({generate: false});\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.handleClick}>Generate JSON</button>\r\n                <br/>\r\n                <textarea value={JSON.stringify(this.props.jsonOutput)} readOnly={true}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleClick = () => {\r\n        console.log('generate json');\r\n        this.setState({generate: true});\r\n    }\r\n}","import * as React from \"react\";\r\nimport {graph} from \"../definitions/all-definitions\";\r\n\r\n\r\nexport class ComboBox extends React.Component<any, any> {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.props.onChange(e);\r\n    };\r\n\r\n    render() {\r\n        const types = this.props.choices.map(\r\n            (typeName, index) => <option value={index} key={index}>{typeName}</option>\r\n        );\r\n        return (\r\n            <div>\r\n                <select onChange={this.handleChange}>\r\n                    <option value=\"-1\">Not selected</option>\r\n                    {types}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}","/**\r\n * Generic text input element.\r\n * Currently used by only matrix component\r\n */\r\nimport * as React from \"react\";\r\nimport { ValueType } from \"../definitions/types\";\r\n\r\ninterface IInputElementProps {\r\n    elementType: string,\r\n    value: ValueType,\r\n    onChange: (row: number, col: number, newVal: any) => void,\r\n    row: number,\r\n    col: number,\r\n}\r\n\r\ninterface IInputElementState {\r\n    valid: boolean\r\n}\r\n\r\n// Usage: <InputElement elementType=boolean|number|... value=value />\r\nexport class InputElement extends React.Component<any, IInputElementState> {\r\n    constructor(props: IInputElementProps) {\r\n        super(props);\r\n        this.state = {\r\n            valid: true\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (<input type=\"text\"\r\n                       pattern=\"[0-9]*\"\r\n                       value={this.props.value}\r\n                       onChange={this.onChange}\r\n                       className=\"matrixInput\"\r\n        />);\r\n    }\r\n\r\n    private onChange = (event: any) => {\r\n        console.log('row: ', this.props.row, 'col: ', this.props.col, 'value: ', event.target.value);\r\n        this.props.onChange(this.props.row, this.props.col, event.target.value);\r\n    };\r\n}","import * as React from \"react\";\r\nimport {ValueType} from \"../definitions/types\";\r\nimport {InputElement} from \"./input-element\";\r\n\r\nexport interface IMatrixProps {\r\n    row: number,\r\n    col: number,\r\n    elementType: string,\r\n    defaultValue: ValueType\r\n}\r\n\r\nexport interface IMatrixState {\r\n    row: number,\r\n    col: number,\r\n    data: ValueType[][], // TODO think a better way to do this. Maybe Matrix<T>\r\n}\r\n\r\n// Usage: <Matrix row=5 col=5 elementType=\"boolean\" value=\"0\" />\r\nexport class Matrix extends React.Component<any, IMatrixState> {\r\n    constructor(props: IMatrixProps) {\r\n        super(props);\r\n        this.state = {\r\n            row: this.props.row,\r\n            col: this.props.col,\r\n            data: this.generateDataState()\r\n        };\r\n    }\r\n\r\n    generateDataState(): any[] {\r\n        // Matrix array representation\r\n        const data = [];\r\n        for (let i = 0; i < this.props.row; ++i) {\r\n            data.push([]);\r\n            for (let j = 0; j < this.props.row; ++j) {\r\n                data[i].push(this.props.defaultValue);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    // Create inputs as table of InputElement components\r\n    renderInputTable() {\r\n        const table = [];\r\n        for (let i = 0; i < this.props.row; ++i) {\r\n            const children = [];\r\n            for (let j = 0; j < this.props.col; j++) {\r\n                let dataPoint = this.state.data[i][j];\r\n                if (dataPoint === \"undefined\") {\r\n                    dataPoint = this.props.defaultValue;\r\n                }\r\n                children.push(\r\n                    <td key={j}>\r\n                        <InputElement\r\n                            row={i}\r\n                            col={j}\r\n                            value={dataPoint}\r\n                            onChange={this.handleChange}\r\n                            elementType={this.props.elementType}\r\n                        />\r\n                    </td>\r\n                );\r\n            }\r\n            table.push(<tr key={i}>{children}</tr>);\r\n        }\r\n\r\n        return <table>\r\n            <tbody>{table}</tbody>\r\n        </table>;\r\n    }\r\n\r\n    render() {\r\n        return (this.renderInputTable());\r\n    }\r\n\r\n    // Children will call this callback when their input changes.\r\n    // This updates Matrix components data state.\r\n    // Because we can't access child components inner state, we have to use this callback from parent.\r\n    // By doing that we are setting Matrix component as source of thruth.\r\n    private handleChange = (row: number, col: number, newValue: ValueType) => {\r\n        const copyData = this.state.data.slice();\r\n        copyData[row][col] = newValue;\r\n        this.setState({data: copyData});\r\n        this.props.jsonOutputSetter(copyData);\r\n    };\r\n}","import merge from 'deepmerge';\r\nimport * as React from \"react\";\r\nimport {graph, graphs} from \"../definitions/all-definitions\";\r\nimport {resolveInheritence} from \"../util/helpers\";\r\nimport {SaveJson} from \"../util/save-json\";\r\nimport {ComboBox} from \"./combo-box\";\r\nimport {Matrix} from \"./matrix\";\r\n\r\nexport interface IGraphFormState {\r\n    data_type: number,\r\n    raw_type: number,\r\n    input_elements: JSX.Element,\r\n    json_output: object,\r\n    definition: object\r\n}\r\n\r\nexport class GraphForm extends React.Component<{}, IGraphFormState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data_type: -1,\r\n            raw_type: -1,\r\n            input_elements: null,\r\n            json_output: {},\r\n            definition: {}\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Select data type:\r\n\r\n                <ComboBox\r\n                    choices={Object.keys(graphs)}\r\n                    onChange={this.handleChangeDataType}/>\r\n\r\n                Select {graph.name} type:\r\n\r\n                <ComboBox\r\n                    choices={graph.raw_types}\r\n                    onChange={this.handleChangeRawType}/>\r\n\r\n                {this.createStructure()}\r\n\r\n                <SaveJson jsonOutput={this.state.json_output}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // = JSX Element Generators = //\r\n\r\n    // TODO element must be recursive.\r\n    private createStructure(): JSX.Element {\r\n        if (this.state.raw_type == -1) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof this.state.raw_type !== 'undefined') {\r\n            const rawTypeName = graph.raw_types[this.state.raw_type];\r\n            if (typeof rawTypeName === 'undefined') {\r\n                return null;\r\n            }\r\n            // @ts-ignore\r\n            const attrInfo = graph.raw[rawTypeName][graph.attributes[0]]; // raw.dense.edges or raw.sparse.edges\r\n            const structureType = attrInfo.structure;\r\n            const elementInfo = attrInfo.element;\r\n\r\n            const elementType = elementInfo[0];\r\n            const defaultValue = elementInfo[1];\r\n\r\n            const normalizedStructureType = structureType.trim().toLowerCase();\r\n            let col = 0;\r\n            // default 5 row, ultimately row count doesn't matter because we can expand at will.\r\n            let row = 5;\r\n            if (normalizedStructureType === \"matrix\") {\r\n                // const elemName = elementInfo[0];\r\n                // const elemDefault = elementInfo[1];\r\n                col = 6;\r\n                row = col;\r\n                return (<Matrix row={row}\r\n                                col={col}\r\n                                attrInfo={attrInfo}\r\n                                elementType={elementType}\r\n                                defaultValue={defaultValue}\r\n                                jsonOutputSetter={this.jsonOutputSetter}/>);\r\n\r\n            } else if (normalizedStructureType === \"list\") {\r\n                /* Have error with tuple continer */\r\n                // return (<TupleContainer tup_dimension={2}/>);\r\n                return (<Matrix row={row}\r\n                                col={2}\r\n                                elementType={elementType}\r\n                                defaultValue={defaultValue}\r\n                                jsonOutputSetter={this.jsonOutputSetter}/>)\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // = Event Handlers = //\r\n    private handleChangeDataType = (event: any) => {\r\n        const dataTypeIndex = event.target.value;\r\n        const definition = resolveInheritence(Object.keys(graphs)[dataTypeIndex]);\r\n\r\n        this.setState({data_type: dataTypeIndex, definition});\r\n    };\r\n\r\n    private handleChangeRawType = (event: any) => {\r\n        this.setState({raw_type: event.target.value});\r\n    };\r\n\r\n    private jsonOutputSetter = (json: any) => {\r\n        this.setState({json_output: json});\r\n    };\r\n}","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {GraphForm} from \"./forms/graph-form\";\nimport registerServiceWorker from './registerServiceWorker';\nimport './style/index.css'\n\nReactDOM.render(\n  <GraphForm />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}